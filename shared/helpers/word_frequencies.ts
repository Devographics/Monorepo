import sortBy from 'lodash/sortBy.js'

// Define a set of common English stop words
const stopWords: Set<string> = new Set([
    'the',
    'for',
    'a',
    'an',
    'and',
    'or',
    'but',
    'nor',
    'so',
    'yet',
    'at',
    'by',
    'from',
    'of',
    'on',
    'to',
    'with',
    'without',
    'is',
    'in',
    'not',
    'be',
    'it',
    'i',
    'that',
    'like',
    'are',
    'have',
    'no',
    'use',
    'as',
    'when',
    'some',
    'should',
    'more',
    'you',
    'can',
    'being',
    'way',
    'etc',
    'all',
    'need',
    'would',
    'eg',
    'its',
    'do',
    'using',
    'always',
    'there',
    'if',
    'this',
    'cant',
    'just',
    'able',
    'we',
    'them',
    'many',
    'too',
    'make',
    'dont',
    'still',
    'much',
    'things',
    'they',
    'out',
    'has',
    'lot',
    'get',
    'know',
    'into',
    'very',
    'than',
    'nice',
    'well',
    'how',
    'about',
    'other',
    'what',
    'their',
    'theyre',
    'really',
    'lack',
    'hard',
    'one',
    'new',
    'which',
    'same',
    'easy',
    'enough',
    'difficult',
    'most',
    'work',
    'why',
    'even',
    'also',
    'us',
    // https://gist.github.com/sebleier/554280?permalink_comment_id=2838826#gistcomment-2838826
    'a',
    'about',
    'above',
    'after',
    'again',
    'against',
    'ain',
    'all',
    'am',
    'an',
    'and',
    'any',
    'are',
    'aren',
    "aren't",
    'as',
    'at',
    'be',
    'because',
    'been',
    'before',
    'being',
    'below',
    'between',
    'both',
    'but',
    'by',
    'can',
    'couldn',
    "couldn't",
    'd',
    'did',
    'didn',
    "didn't",
    'do',
    'does',
    'doesn',
    "doesn't",
    'doing',
    'don',
    "don't",
    'down',
    'during',
    'each',
    'few',
    'for',
    'from',
    'further',
    'had',
    'hadn',
    "hadn't",
    'has',
    'hasn',
    "hasn't",
    'have',
    'haven',
    "haven't",
    'having',
    'he',
    'her',
    'here',
    'hers',
    'herself',
    'him',
    'himself',
    'his',
    'how',
    'i',
    'if',
    'in',
    'into',
    'is',
    'isn',
    "isn't",
    'it',
    "it's",
    'its',
    'itself',
    'just',
    'll',
    'm',
    'ma',
    'me',
    'mightn',
    "mightn't",
    'more',
    'most',
    'mustn',
    "mustn't",
    'my',
    'myself',
    'needn',
    "needn't",
    'no',
    'nor',
    'not',
    'now',
    'o',
    'of',
    'off',
    'on',
    'once',
    'only',
    'or',
    'other',
    'our',
    'ours',
    'ourselves',
    'out',
    'over',
    'own',
    're',
    's',
    'same',
    'shan',
    "shan't",
    'she',
    "she's",
    'should',
    "should've",
    'shouldn',
    "shouldn't",
    'so',
    'some',
    'such',
    't',
    'than',
    'that',
    "that'll",
    'the',
    'their',
    'theirs',
    'them',
    'themselves',
    'then',
    'there',
    'these',
    'they',
    'this',
    'those',
    'through',
    'to',
    'too',
    'under',
    'until',
    'up',
    've',
    'very',
    'was',
    'wasn',
    "wasn't",
    'we',
    'were',
    'weren',
    "weren't",
    'what',
    'when',
    'where',
    'which',
    'while',
    'who',
    'whom',
    'why',
    'will',
    'with',
    'won',
    "won't",
    'wouldn',
    "wouldn't",
    'y',
    'you',
    "you'd",
    "you'll",
    "you're",
    "you've",
    'your',
    'yours',
    'yourself',
    'yourselves',
    'could',
    "he'd",
    "he'll",
    "he's",
    "here's",
    "how's",
    "i'd",
    "i'll",
    "i'm",
    'im',
    "i've",
    'ive',
    "let's",
    'ought',
    "she'd",
    "she'll",
    "that's",
    "there's",
    "they'd",
    "they'll",
    "they're",
    "they've",
    "we'd",
    "we'll",
    "we're",
    "we've",
    "what's",
    "when's",
    "where's",
    "who's",
    "why's",
    'would'
])

export type FrequencyItem = {
    word: string
    count: number
}
// Function to calculate word frequencies in an array of strings, excluding stop words
export function calculateWordFrequencies(data: string[]) {
    let wordFrequencies: FrequencyItem[] = []

    data.forEach(sentence => {
        // Normalize and split the sentence into words
        const words = sentence.toLowerCase().split(/\s+/)

        words.forEach(word => {
            // Remove any non-alphanumeric characters from the word
            const cleanedWord = word.replace(/[^a-z0-9]+/gi, '')

            // Only add the word if it's not a stop word and not empty
            if (!stopWords.has(cleanedWord) && cleanedWord) {
                const currentWordIndex = wordFrequencies.findIndex(w => w.word === cleanedWord)
                if (currentWordIndex === -1) {
                    wordFrequencies.push({ word: cleanedWord, count: 1 })
                } else {
                    wordFrequencies[currentWordIndex] = {
                        word: cleanedWord,
                        count: wordFrequencies[currentWordIndex].count + 1
                    }
                }
            }
        })
    })

    wordFrequencies = wordFrequencies.filter(w => w.count > 10)
    wordFrequencies = sortBy(wordFrequencies, 'count')
    wordFrequencies.reverse()
    return wordFrequencies
}
