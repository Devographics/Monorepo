/**
 * @see api2/src/types/surveys.ts for most up to date types used in API v2
 * Here are the shared types currently used in the surveyform/surveyadmin
 */
export type FieldTemplateId =
  | "email"
  | "text"
  | "longtext"
  | "help"
  | "others"
  | "others_textarea"
  | "happiness"
  | "single"
  | "multiple"
  | "opinion"
  | "proficiency"
  | "country"
  | "bracket"
  | "feature"
  | "pattern"
  | "tool"
  /** An autocomplete for the Project collection */
  | "project"
  /** An autocomplete for the People collection */
  | "people"
  | "email2"
  | "receive_notifications"
  | "race_ethnicity"
  | "slider"
  | "top_n";

// TODO: what is a section template? The default for all questions?
export type SectionTemplateId = FieldTemplateId | string;
export interface Field {
  id: string;
  fieldName?: string;
  matchTags?: Array<string>;
  template?: FieldTemplateId;
}

/**
 * Generated by parsing the question template
 */
export interface ParsedQuestion extends Pick<Field, "template"> {
  // those are inherited from Vulcan schemas
  // we may want to differentiate the QuestionTemplate from the parsed question generated
  // by "getQuestionObject" in the future
  /** Simple Schema type: String | Number etc. */
  fieldName?: string;
  type?: any;
  optional?: any;
  arrayItem?: ParsedQuestion;
  id?: string;
  title?: string;
  allowmultiple?: boolean;
  allowother?: boolean;
  alias?: string;
  year?: any;
  limit?: number;
  itemProperties?: any;
  autocompleteQuery?: () => any;
  autocompleteOptions?: {
    autocompletePropertyName: string;
    fragmentName?: string;
    valuePropertyName?: string;
    multi?: boolean;
    autocompleteQueryResolverName: string;
    labelsQueryResolverName: string;
  };
  dynamicQuery?: () => any;
  /**
   * Inherited from Vulcan
   * autocomplete  | multiautocomplete | React component
   */
  input?: any;
  intlId?: string;
  options?:
  | ((
    props: any
  ) => Array<{ value?: string | number; intlId?: string; label?: string }>)
  | Array<{ value?: string | number; intlId?: string; label?: string }>;
  query?: () => any;
  queryWaitsForValue?: boolean;
  sectionSlug?: string;
  showOther?: boolean;
  slug?: string;
  suffix?: string;
  matchTags?: Array<string>;
  hasComment?: boolean;
}

export type SurveyQuestion = Field;
export interface SurveySection {
  intlId?: string;
  id?: string;
  slug?: string | "features";
  questions: Array<SurveyQuestion>;
  template?: SectionTemplateId;
}

export interface EOConfig {
  listId: string;
}

/**
 * Values that do not depend on the survey year
 * Used for magic link emails
 */
export interface SurveySharedContext {
  /**
   * In newer surveys, replace slugs/prettySlug/context
   * = surveyId
   * @example state_of_js
   */
  id: string;
  /**
   * In previous survey: was equal to the survey id eg "js2022"
   * 
   * Now: equal to the survey context with "_" eg "state_of_js"
   * 
   * => use as survey context coupled with year
   * => DO NOT use as unique survey id
   */
  slug: string;
  /**
   * Slug with "dashes", used as the survey relative URL
   * state-of-js
   * Does NOT include the year
   */
  prettySlug?: string;
  /**
   * Name without the year
   */
  name?: string;
  domain?: string;
}

/**
 * Fields that are specific to one edition (=1 year) of a survey
 */
interface SurveyEditionSpecifics {
  /**
   * In newer surveys, id = id of the unique edition
   * = surveyEditionId
   * 
   * @example js2022
   * /!\ when merging survey context and edition, we might want to
   * be careful to keep both id, ideally by isolating edition in its field:
   * {context: SurveyContext, edition: SurveyEdition }
   */
  id: string;
  createdAt?: string;
  updatedAt?: string;
  /**
   * Slug with underscores
   * state_of_js
   * Used as pathname on github
   * Does NOT include the year
   * @deprecated
   */
  context?: string;
  /**
   * Same as slug
   * @example js2022
   */
  surveyId: string;
  year?: number;
  status?: SurveyStatus;
  outline: Array<SurveySection>;
  /**
   * Home page URL. May be big!
   * 
   * /!\ in older configs, was relative to "/surveys"!
   * /!\ In newer configs, is absolute!
   * 
   * If you need to read this value,
   * use the "getSurveyImageUrl" helper 
   * that handles the legacy behaviour properly
   */
  imageUrl: string;
  faviconUrl?: string;
  /**
   * Absolute URL to a social image
   * 
   * Should be smaller to consume less bandwidth
   * 
   * As a best practice, should be hosted outside of the app,
   * as it consumes a lot of bandwith
   */
  socialImageUrl?: string;

  credits?: any;
  tags?: string[];
  emailOctopus: EOConfig;
  colors: {
    primary: string;
    secondary: string;
    text: string;
    background: string;
    backgroundSecondary: string;
  }
  // style
  /** @deprecated old syntax*/
  bgColor: string;
  /** @deprecated old syntax*/
  textColor: string;
  /** @deprecated old syntax*/
  linkColor: string;
  /** @deprecated old syntax*/
  hoverColor: string;
  //
  shareUrl: string;
  hashtag: string;
  resultsUrl: string;
}

/**
 * A survey edition
 * With common info, edition specific info, and questions
 */
export type SurveyEdition = SurveySharedContext & SurveyEditionSpecifics & { surveyId: SurveySharedContext["id"], surveyEditionId: SurveyEdition["id"] }

export type SurveyEditionDescription = Pick<SurveyEdition,
  "surveyId" | "name" | "status" | "prettySlug" | "slug" | "year" | "imageUrl"
  // in older surveys, "context" is state_of_js and slug is "js2022"
  // while in newer surveys slug is "state_of_js"
  | "context">


/**
 * A survey with all it's editions
 * Structure used in "/api"
 * NOTE: this structure is big and only meant for intermediate usage
 * eg loading all surveys before displaying a specific one
 * 
 * When we want to list surveys => only need the descriptions of each
 * Or to display a specific surveys => only need one edition (=1 year)
 */
export interface SurveyEditions extends SurveySharedContext {
  editions: Array<SurveyEditionSpecifics>
}


export type HydratedSurveyEdition = Omit<
  SurveyEdition,
  "createdAt" | "updatedAt"
> & {
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * 1 preview
 * 2 open
 * 3 closed
 * 4 hidden
 */
export type SurveyStatus = 1 | 2 | 3 | 4;
export type SurveyStatusLabel = "preview" | "open" | "closed" | "hidden";

