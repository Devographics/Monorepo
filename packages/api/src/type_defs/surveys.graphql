#import "./enums.graphql"
#import "./completion.graphql"
#import "./facets.graphql"
#import "./options.graphql"
#import "./filters.graphql"
#import "./categories.graphql"
#import "./demographics.graphql"
#import "./countries.graphql"
#import "./entity.graphql"
#import "./features.graphql"
#import "./features_others.graphql"
#import "./github.graphql"
#import "./twitter.graphql"
#import "./matrices.graphql"
#import "./mdn.graphql"
#import "./opinions.graphql"
#import "./resources.graphql"
#import "./tools.graphql"
#import "./tools_others.graphql"
#import "./tools_cardinality_by_user.graphql"
#import "./translations.graphql"
#import "./environments.graphql"
#import "./proficiency.graphql"
#import "./totals.graphql"
#import "./happiness.graphql"
#import "./bracket.graphql"

enum SurveyType {
    state_of_js
    state_of_css
}


"""
All surveys
"""
type Surveys {
    state_of_js: StateOfJSSurvey
    state_of_css: StateOfCSSSurvey
}

type StateOfJSSurvey {
    foobar: String
}

type StateOfCSSSurvey {
    foobar: String
}

"""
A survey
"""
type Survey {
    """
    The survey's name
    """
    surveyName: SurveyType
    """
    Total responses
    """
    totals(filters: Filters): Totals
    """
    Experience results for a specific tool
    """
    tool(id: ToolID!): Tool
    """
    Experience results for a range of tools
    """
    tools(ids: [ToolID]): [Tool]
    """
    Other tools (browsers, editors, etc.)
    """
    tools_others(id: OtherToolsID!, filters: Filters, options: Options, facet: Facet): OtherTools
    """
    Rankings (awareness, interest, satisfaction) for a range of tools
    """
    tools_rankings(ids: [ToolID]!): ToolsRankings
    """
    Cardinality By User (by-users tool count breakdown for a specific set of tools and specific criteria)
    """
    tools_cardinality_by_user(
        year: Int!,
        ids: [ToolID]!,
        experienceId: ToolExperienceID!
    ): [ToolsCardinalityByUser]
    """
    Usage results for a specific feature
    """
    feature(id: FeatureID!): Feature
    """
    Usage results for a range of features
    """
    features(ids: [FeatureID]): [Feature]
    """
    Choice based features
    """
    features_others(id: OtherFeaturesID!, filters: Filters, options: Options, facet: Facet): OtherFeatures
    """
    Demographics data (gender, company size, salary, etc.)
    """
    demographics: Demographics
    """
    Opinions data
    """
    opinion(id: OpinionID!, filters: Filters, options: Options, facet: Facet): Opinion
    """
    Opinions data
    """
    opinions_others(id: OtherOpinionsID!, filters: Filters): OtherOpinions
    """
    Resources (sites, blogs, podcasts, etc.)
    """
    resources(id: ResourcesID!, filters: Filters, options: Options, facet: Facet): Resources
    """
    Data about a specific tool category
    """
    category(id: CategoryID!): Category
    """
    Matrices data (used for cross-referencing heatmap charts)
    """
    matrices: Matrices
    """
    Environments data, for those based on multiple choices,
    such as browsers, form factors... Only contain predifined
    choices, freeform answers are stored in `environmentsOthers`.
    """
    environments(id: EnvironmentID!, filters: Filters, options: Options, facet: Facet): Environments
    """
    Environments data, for those based on rating, such as css for emails...
    """
    environments_ratings(id: EnvironmentID!, filters: Filters): EnvironmentsRatings
    """
    Proficiency data, such as backend proficiency, javascript...
    """
    proficiency(id: ProficiencyID!, filters: Filters): Proficiency
    """
    Happiness data, either for a specific category or more generally
    """
    happiness(id: HappinessID!, filters: Filters): Happiness
    """
    Brackets
    """
    bracketWins(id: BracketID!, filters: Filters): BracketWins
    bracketMatchups(id: BracketID!, filters: Filters): BracketMatchups
}
