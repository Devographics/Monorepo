# Title for the gitleaks configuration file.
title = "Gitleaks title"

# An array of tables that contain information that define instructions
# on how to detect secrets
# [[rules]]

# Unique identifier for this rule
# id = "awesome-rule-1"

# Short human readable description of the rule.
# description = "awesome rule 1"

# Golang regular expression used to detect secrets. Note Golang's regex engine
# does not support lookaheads.
# regex = '''one-go-style-regex-for-this-rule'''

# Golang regular expression used to match paths. This can be used as a standalone rule or it can be used
# in conjunction with a valid `regex` entry.
# path = '''a-file-path-regex'''

# Array of strings used for metadata and reporting purposes.
# tags = ["tag","another tag"]

# Int used to extract secret from regex match and used as the group that will have
# its entropy checked if `entropy` is set.
# secretGroup = 3

# Float representing the minimum shannon entropy a regex group must have to be considered a secret.
# entropy = 3.5

# You can include an allowlist table for a single rule to reduce false positives or ignore commits
# with known/rotated secrets
#[generic-api-key.allowlist]
#description = "ignore commit A"
#commits = []
#paths = [
#    '''src/server/migrations.ts''',
#]
#regexes = [
#]

# This is a global allowlist which has a higher order of precedence than rule-specific allowlists.
# If a commit listed in the `commits` field below is encountered then that commit will be skipped and no
# secrets will be detected for said commit. The same logic applies for regexes and paths.
#[allowlist]
#description = "global allow list"
#commits = []
#paths = [
#    '''src/server/migrations.ts''',
#	'''gitleaks\.toml''',
#	'''(.*?)(jpg|gif)'''
#]
#regexes = [
#]