/**
 * To be used for top level errors in _app and _error
 */
import React from "react";

// import makeStyles from "~/lib/mui/makeStyles";

// import NotFound from "./NotFound";
import DefaultError from "./DefaultError";
import { useI18n } from "@devographics/react-i18n";

/*
const useStyles = makeStyles({
  content: {
    paddingTop: "64px",
    maxWidth: "1200px",
    margin: "auto",
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  },
});
*/

const statusCodeComponents: { [key: number]: React.ReactNode } = {
  404: <NotFound />,
};

export interface TopLevelErrorContainerProps {
  statusCode?: number;
  error?: Error;
}

const getDefaultMessage = (
  t: TFunction,
  error?: Error,
  statusCode?: number
) => {
  if (statusCode) {
    // @see https://www.i18next.com/principles/fallback#calling-with-fallback-keys
    return t([
      `error.status_code.${statusCode}.message`,
      "error.server_unknown",
    ]);
  } else if (error?.message) {
    return error.message;
  }
  return t("error.client_unknown");
};

const proposeReload = (statusCode?: number) => {
  if (!statusCode) return true;
  return [500].includes(statusCode);
};
const proposeHomeRedirection = (statusCode?: number) => {
  if (!statusCode) return false;
  return true;
};
const proposeLoginRedirection = (statusCode?: number) => {
  if (!statusCode) return false;
  return [401, 403].includes(statusCode);
};

export const TopLevelErrorDisplay = ({
  error,
  statusCode,
}: TopLevelErrorContainerProps) => {
  //const classes = useStyles();
  const { t } = useI18n();
const content = (statusCode && statusCodeComponents[statusCode]) || (
    <DefaultError
      error={error}
      message={getDefaultMessage(t, error, statusCode)}
      proposeReload={proposeReload(statusCode)}
      proposeHomeRedirection={proposeHomeRedirection(statusCode)}
      proposeLoginRedirection={proposeLoginRedirection(statusCode)}
    />
  );

  return (
    <div className={classes.content} style={{ flexDirection: "column" }}>
      {content}
    </div>
  );
};

export default TopLevelErrorDisplay;
