#import "./entity.graphql"
#import "./completion.graphql"
#import "./mdn.graphql"
#import "./twitter.graphql"
#import "./github.graphql"
#import "./tools.graphql"
#import "./features.graphql"
#import "./comments.graphql"
#import "./data_explorer.graphql"

scalar JSON
scalar JSONObject

type SurveyMetadata {
    id: String
    name: String
    domain: String
    hashtag: String

    imageUrl: String
    responsesCollectionName: String
    normalizedCollectionName: String

    emailOctopus: EmailOctopusData

    partners: [SponsorItem]
    editions: [EditionMetadata]
}

type EmailOctopusData {
    listId: String
}

type EditionMetadata {
    id: String
    surveyId: String

    survey: SurveyMetadata

    year: Int
    status: Int
    resultsStatus: Int
    hashtag: String

    startedAt: String
    endedAt: String

    questionsUrl: String
    resultsUrl: String
    feedbackUrl: String
    imageUrl: String
    faviconUrl: String
    socialImageUrl: String
    issuesUrl: String
    discordUrl: String

    sections(include: IncludeEnum): [SectionMetadata]

    sponsors: [SponsorItem]

    credits: [CreditItem]

    sources: [JSON]

    faq: [String]

    tshirt: TshirtDefinition

    colors: Colors

    enableReadingList: Boolean
    enableChartSponsorships: Boolean
    enableSkip: Boolean

    sitemap: [SitemapSection]
}

enum IncludeEnum {
    outlineOnly
    apiOnly
    all
}

type Colors {
    primary: String
    secondary: String
    text: String
    background: String
    backgroundSecondary: String
}

type TshirtDefinition {
    images: [String]
    url: String
    price: Float
    designerUrl: String
}

type SponsorItem {
    id: String
    name: String
    url: String
    imageUrl: String
}

type CreditItem {
    id: String
    role: String
    entity: Entity
}

type SectionMetadata {
    id: String
    # optionally, a message at the top of the section
    messageId: String
    # used to override id when building field paths
    slug: String
    intlId: String
    questions: [QuestionMetadata]
    # whether a section only exists in the API and not the ouline
    apiOnly: Boolean
    template: String
}

# Keep in sync with the corresponding queries in shared/helpers/queries.ts
type QuestionMetadata {
    id: String
    sectionId: String
    yearAdded: Int
    label: String
    intlId: String
    i18nNamespace: String
    template: String
    inputComponent: String
    rawPaths: RawDbPaths
    normPaths: NormDbPaths
    contentType: ContentType
    options: [OptionsMetadata]
    groups: [GroupsMetadata]
    followups: [FollowupsMetadata]
    entity: Entity
    isRequired: Boolean
    allowOther: Boolean
    allowComment: Boolean
    showCommentInput: Boolean
    allowMultiple: Boolean
    countsTowardScore: Boolean
    randomize: Boolean
    order: OptionsOrder
    cutoff: Int
    matchType: String
    matchTags: [String]
    # token ids that should never be matched for this question
    disallowedTokenIds: [String]
    limit: Int
    # options/values for the question are numeric
    optionsAreNumeric: Boolean
    # options are ranges of numbers
    optionsAreRange: Boolean
    # options follow each other sequentially
    optionsAreSequential: Boolean
    # whether a question only exists in the API and not the ouline
    apiOnly: Boolean
    # whether a question should be hidden in the survey form
    hidden: Boolean
    # textarea vs input for freeform questions
    longText: Boolean
}

type RawDbPaths {
    base: String
    response: String
    other: String
    comment: String
    prenormalized: String
    followup_predefined: JSON
    followup_freeform: JSON
    subPaths: JSON
    skip: String
}

type NormDbPaths {
    response: String
    other: String
    prenormalized: String
    comment: String
    followup_predefined: JSON
    followup_freeform: JSON
    raw: String
    patterns: String
    metadata: String
    error: String
}

enum ContentType {
    string
    number
}

scalar StringOrInt

type OptionsMetadata {
    id: StringOrInt
    intlId: String
    label: String
    average: Float
    entity: Entity
}

type GroupsMetadata {
    id: String
    intlId: String
    label: String
    average: Float
    lowerBound: Float
    upperBound: Float
}

# no need for default values here because we already specify default values
# inside genericComputeFunction
input Parameters {
    limit: Int
    cutoff: Int
    sort: SortSpecifier
    facetSort: SortSpecifier
    facetLimit: Int
    facetCutoff: Int
    enableCache: Boolean
    showNoAnswer: Boolean
    showNoMatch: Boolean
    enableBucketGroups: Boolean
    # Merge cutoff answers and unmatched answers into a single "other answers" bucket
    mergeOtherBuckets: Boolean
    enableAddOverallBucket: Boolean
    enableAddMissingBuckets: Boolean
}

input CommentParameters {
    limit: Int
    skip: Int
    enableCache: Boolean
}

enum ResponsesType {
    Predefined
    Prenormalized
    Freeform
}

input SortSpecifier {
    property: SortProperty
    order: SortOrder
}

enum SortProperty {
    options
    count
    percent
    id
    mean
    average
}

enum SortOrder {
    asc
    desc
}

enum OptionsOrder {
    specified
    random
    alphabetical
}

type ResponseEditionData {
    year: Int
    editionId: String
    completion: YearCompletion
    buckets: [Bucket]
}

type RawData {
    responseId: String
    content: JSON # could be String or [String]
}

"""
A data bucket
"""
type Bucket {
    id: String
    label: String
    """
    Respondent count
    """
    count: Int
    """
    Percentage relative to question respondents
    """
    percentageQuestion: Float
    """
    Percentage relative to survey respondents
    """
    percentageSurvey: Float
    """
    Entity associated with the current bucket
    """
    entity: Entity
    """
    Normalization Token associated with the current bucket
    """
    token: Token
    """
    An array of bucket facets, when bucket is faceted
    """
    facetBuckets: [FacetBucket]
    """
    Average age/years of experience/etc. of the bucket, when bucket is faceted by a range
    or some other numerical value
    """
    averageByFacet: Float
    """
    Percentiles by facet
    """
    percentilesByFacet: Percentiles
    """
    For combined results, indicates if this is issued from freeform data
    """
    isFreeformData: Boolean
    """
    Indicates if bucket was removed because of insufficient data
    """
    hasInsufficientData: Boolean
    """
    If bucket was created by grouping other buckets, ids of these grouped buckets
    """
    groupedBucketIds: [String]
    """
    If bucket was created by grouping other buckets, contents of these grouped buckets
    """
    groupedBuckets: [GroupedBucket]
}

"""
Same as above, but without the "groupedBucket" field
"""
type GroupedBucket {
    id: String
    label: String
    """
    Respondent count
    """
    count: Int
    """
    Percentage relative to question respondents
    """
    percentageQuestion: Float
    """
    Percentage relative to survey respondents
    """
    percentageSurvey: Float
    """
    Entity associated with the current bucket
    """
    entity: Entity
    """
    Normalization Token associated with the current bucket
    """
    token: Token
    """
    An array of bucket facets, when bucket is faceted
    """
    facetBuckets: [FacetBucket]
    """
    Average age/years of experience/etc. of the bucket, when bucket is faceted by a range
    or some other numerical value
    """
    averageByFacet: Float
    """
    Percentiles by facet
    """
    percentilesByFacet: Percentiles
    """
    For combined results, indicates if this is issued from freeform data
    """
    isFreeformData: Boolean
    """
    Indicates if bucket was removed because of insufficient data
    """
    hasInsufficientData: Boolean
}

type Percentiles {
    """
    0th percentile (minimum) based on range average of all facet buckets
    """
    p0: Float
    """
    10th percentile based on range average of all facet buckets
    """
    p10: Float
    """
    25th percentile based on range average of all facet buckets
    """
    p25: Float
    """
    median (50th percentile) based on range average of all facet buckets
    """
    p50: Float
    """
    75th percentile based on range average of all facet buckets
    """
    p75: Float
    """
    90th percentile based on range average of all facet buckets
    """
    p90: Float
    """
    100th percentile (maximum) based on range average of all facet buckets
    """
    p100: Float
}

type FacetBucket {
    id: String
    label: String
    """
    Respondent count
    """
    count: Int
    """
    Percentage relative to question respondents
    """
    percentageQuestion: Float
    """
    Percentage relative to survey respondents
    """
    percentageSurvey: Float
    """
    Percentage of the bucket represented by the current facet
    """
    percentageBucket: Float
    """
    Entity associated with the current bucket
    """
    entity: Entity
    """
    Indicates if bucket was removed because of insufficient data
    """
    hasInsufficientData: Boolean
    """
    If bucket was created by grouping other buckets, ids of these grouped buckets
    """
    groupedBucketIds: [String]
}

type Query {
    """
    All surveys
    """
    surveys: Surveys
    """
    Meta information about the API
    """
    _metadata(surveyId: SurveysID, editionId: AllEditionsID): APIMetadata
    """
    Data about a specific entity (tool, library, framework, features, etc.)
    """
    entity(id: ID!): Entity
    """
    Data about a specific normalization token
    """
    token(id: ID!): Token
    """
    Get multiple entities (tools, libraries, frameworks, features, etc.)
    """
    entities(
        ids: [String]
        tags: [String]
        includeNormalizationEntities: Boolean
        includeAPIOnlyEntities: Boolean
    ): [Entity]
    """
    Translate a string
    """
    translation(key: String!, localeId: LocaleID!): TranslationString
    """
    Get a locale
    """
    locale(localeId: LocaleID!, contexts: [I18nContext], enableFallbacks: Boolean): Locale
    """
    Get multiple locales
    """
    locales(contexts: [I18nContext], localeIds: [LocaleID], enableFallbacks: Boolean): [Locale]
}

type APIMetadata {
    surveys: [SurveyMetadata]
}

type TranslationString {
    key: String
    t: String
    tHtml: String
    tClean: String
    context: String
    isFallback: Boolean
    aliasFor: String
}

type Locale {
    id: String
    label: String
    translators: [String]
    repo: String
    strings: [TranslationString]
    translatedCount: Int
    totalCount: Int
    completion: Int
    untranslatedKeys: [String]
}

type FeatureOption {
    id: FeatureOptionID
    label: String
    entity: Entity
}

type FollowupsMetadata {
    id: String
    options: [FollowupOption]
}

type FollowupOption {
    id: String
}

enum FeatureOptionID {
    never_heard
    heard
    used
}

type ToolOption {
    id: ToolOptionID
    label: String
    entity: Entity
}

enum ToolOptionID {
    would_use
    would_not_use
    interested
    not_interested
    never_heard
}

type SitemapSection {
    id: String
    titleId: String
    descriptionId: String
    path: String
    blocks: [SitemapBlock]
    children: [SitemapSubSection]
}

type SitemapSubSection {
    id: String
    titleId: String
    descriptionId: String
    path: String
    blocks: [SitemapBlock]
}

type SitemapBlock {
    id: String
    fieldId: String
    tabId: String
    titleId: String
    descriptionId: String
    i18nNamespace: String
    template: String
    blockType: String
    parameters: SitemapBlockParameters
    filtersState: JSON
    year: Int
    items: [String]
    defaultUnits: String
    queryOptions: SitemapBlockQueryOptions
    variants: [SitemapBlockVariant]
    entity: Entity
}

type SitemapBlockVariant {
    id: String
    fieldId: String
    tabId: String
    titleId: String
    descriptionId: String
    i18nNamespace: String
    template: String
    blockType: String
    parameters: SitemapBlockParameters
    filtersState: JSON
    year: Int
    items: [String]
    defaultUnits: String
    queryOptions: SitemapBlockQueryOptions
    entity: Entity
}

type SitemapBlockParameters {
    years: [Int]
    rankCutoff: Int
    limit: Int
    cutoff: Int
    showNoAnswer: Boolean
}

type SitemapBlockQueryOptions {
    addBucketsEntities: Boolean
}
