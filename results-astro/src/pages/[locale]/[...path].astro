---
/**
 * All paths of the app are generated based on
 * the declarative sitemap for the current survey
 */
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import Layout from "@/components/layouts/Layout.astro";
import { astroEnv } from "@/lib/env";
import { astroSurveyWithSitemap } from "@/fetchers/surveyWithSitemap";
import PageTemplate from "@/components/pages/PageTemplate.astro";
import { initTheme } from "@/lib/theme";
// Reason why we use the Bundler moduleResolution: https://stackoverflow.com/questions/58990498/package-json-exports-field-not-working-with-typescript
import { getLocalesWithStrings } from "@devographics/i18n/server";
import { makeTranslatorFunc } from "@devographics/i18n";
import type { PageDefinition } from "@/lib/sitemap";
import { ReactLayout } from "@/components/layouts/ReactLayout";
import { GlobalLayout } from "@/components/layouts/GlobalLayout";

/**
 * TODO: there is no ISR in Astro
 * UNLESS we use Vercel ISR: https://docs.astro.build/en/guides/integrations-guide/vercel/#isr
 * So it means we might want to remove this function altogether,
 * and instead check if the current path is valid for each new request
 *
 * We must either use static rendering for everything
 * Or SSR + HTTP cache for incremental rendering
 * @see https://github.com/withastro/roadmap/discussions/228
 * @see https://vercel.com/docs/edge-network/caching#how-to-cache-responses
 */
export const getStaticPaths = (async () => {
  function removeSlash(str: string) {
    if (!str) return str;
    if (str[0] === "/") return str.slice(1);
    return str;
  }
  const surveyWithSitemap = await astroSurveyWithSitemap();
  const { sitemap } = surveyWithSitemap;
  console.log(
    "Paths in sitemap:",
    sitemap.map((s) => s.path),
  );
  return sitemap.map((pageDefinition) => {
    return {
      params: {
        path:
          pageDefinition.path === "/"
            ? undefined
            : removeSlash(pageDefinition.path),
        // TODO: generate for each possible locale here
        locale: "en-US",
      },
      props: {
        // @ts-ignore TODO
        pageDefinition: pageDefinition as PageDefinition,
      },
    };
  });
}) satisfies GetStaticPaths;

// Each survey edition has its own domain
// so we can stick to global env variable to pick the edition we want
const { editionId, surveyId } = astroEnv();

// Set global values
// As a convenience, we get all contextual values from Astro.locals (~ to React "cache")
// Which avoid props drilling/module top-level values

// Survey, sitemap
const survey = await astroSurveyWithSitemap();
const { sitemap } = survey;
Astro.locals.survey = survey;
Astro.locals.sitemap = sitemap;
// Theme
const theme = initTheme();
Astro.locals.theme = theme;

// I18n
const { locale } = Astro.params; // TODO: is there a better way to handle mandatory params in Astro?
if (!locale) throw new Error("Can't render without locale");
// TODO: we should load locales one at a time during rendering, we don't need all of them at once
const localesWithStrings = await getLocalesWithStrings({
  localeIds: [locale], //["en-US"], //
  // TODO: translationContexts are currently hard-coded in the results app code
  //  and not visible in the "surveys" repo, we need to move them there, or compute the context from the survey id
  contexts: ["results", surveyId, surveyId + "_" + survey.year],
});
const localeWithStrings = localesWithStrings[0];
// TODO: also get the default locale see what we do in Next
console.log(localeWithStrings);

Astro.locals.i18n = {
  t: makeTranslatorFunc(localeWithStrings),
  locale: { id: locale },
  localizePath: (p) => `/${locale}${path}`,
};

// Set page specific values

const { pageDefinition } = Astro.props;
Astro.locals.pageDefinition = pageDefinition;

const { path } = Astro.params;

// TODO: normally this isn't needed, need to check my versions
type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;
---

<Layout title="Welcome to Astro.">
  <GlobalLayout client:only>
    <ReactLayout
      client:only
      pageContext={{
        pageDefinition,
      }}
    >
      <main>
        {/* TODO get showTitle from page context */}
        <PageTemplate showTitle={true} />
        <p class="instructions">
          You are reading the survey of surveyId "{surveyId}" and editionId "{
            editionId
          }", accessing the path "{path}"
        </p>
        <div>
          <p>Raw Sitemap</p>
          <pre><code>
          {JSON.stringify(survey.rawSitemap, null, 2)}
        </code></pre>
        </div>
      </main>
    </ReactLayout>
  </GlobalLayout>
</Layout>
 @/components/layouts/ReactLayout@/components/layouts/GlobalLayout
